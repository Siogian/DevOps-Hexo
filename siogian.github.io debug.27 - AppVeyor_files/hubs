/*!
 * ASP.NET SignalR JavaScript Library v2.2.1
 * http://signalr.net/
 *
 * Copyright (c) .NET Foundation. All rights reserved.
 * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['accountHub'] = this.createHubProxy('accountHub'); 
        proxies['accountHub'].client = { };
        proxies['accountHub'].server = {
            authorizationUpdated: function (accountId, args) {
                return proxies['accountHub'].invoke.apply(proxies['accountHub'], $.merge(["AuthorizationUpdated"], $.makeArray(arguments)));
             },

            buildAdded: function (accountId, args) {
                return proxies['accountHub'].invoke.apply(proxies['accountHub'], $.merge(["BuildAdded"], $.makeArray(arguments)));
             },

            buildDetailsChanged: function (accountId, args) {
                return proxies['accountHub'].invoke.apply(proxies['accountHub'], $.merge(["BuildDetailsChanged"], $.makeArray(arguments)));
             },

            scheduleUpdated: function (accountId, args) {
                return proxies['accountHub'].invoke.apply(proxies['accountHub'], $.merge(["ScheduleUpdated"], $.makeArray(arguments)));
             },

            subscribeAccountEvents: function (previousAccountId, accountId) {
                return proxies['accountHub'].invoke.apply(proxies['accountHub'], $.merge(["SubscribeAccountEvents"], $.makeArray(arguments)));
             },

            unsubscribeAccountEvents: function (accountId) {
                return proxies['accountHub'].invoke.apply(proxies['accountHub'], $.merge(["UnsubscribeAccountEvents"], $.makeArray(arguments)));
             }
        };

        proxies['agentHub'] = this.createHubProxy('agentHub'); 
        proxies['agentHub'].client = { };
        proxies['agentHub'].server = {
            agentPing: function (environmentAccessKey, agentId) {
                return proxies['agentHub'].invoke.apply(proxies['agentHub'], $.merge(["AgentPing"], $.makeArray(arguments)));
             },

            createDeploymentJob: function (environmentAccessKey, parentJobId, jobName) {
                return proxies['agentHub'].invoke.apply(proxies['agentHub'], $.merge(["CreateDeploymentJob"], $.makeArray(arguments)));
             },

            startAgentDeployment: function (agentContext) {
                return proxies['agentHub'].invoke.apply(proxies['agentHub'], $.merge(["StartAgentDeployment"], $.makeArray(arguments)));
             },

            subscribeAgentEvents: function (environmentAccessKey) {
                return proxies['agentHub'].invoke.apply(proxies['agentHub'], $.merge(["SubscribeAgentEvents"], $.makeArray(arguments)));
             }
        };

        proxies['buildJobHub'] = this.createHubProxy('buildJobHub'); 
        proxies['buildJobHub'].client = { };
        proxies['buildJobHub'].server = {
            addArtifact: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["AddArtifact"], $.makeArray(arguments)));
             },

            addCompilationMessage: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["AddCompilationMessage"], $.makeArray(arguments)));
             },

            addMessage: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["AddMessage"], $.makeArray(arguments)));
             },

            addTest: function (jobId, request) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["AddTest"], $.makeArray(arguments)));
             },

            addTests: function (jobId, request) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["AddTests"], $.makeArray(arguments)));
             },

            artifactAdded: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["ArtifactAdded"], $.makeArray(arguments)));
             },

            completeJob: function (jobId, status) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["CompleteJob"], $.makeArray(arguments)));
             },

            completeJobWithSnapshot: function (jobId, status, vmSnapshotName) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["CompleteJobWithSnapshot"], $.makeArray(arguments)));
             },

            getBuildCacheItems: function (jobId) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["GetBuildCacheItems"], $.makeArray(arguments)));
             },

            getBuildCacheItemUploadUrl: function (jobId, buildCacheItem) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["GetBuildCacheItemUploadUrl"], $.makeArray(arguments)));
             },

            getBuildWorkerJob: function (workerId) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["GetBuildWorkerJob"], $.makeArray(arguments)));
             },

            getDownloadableArtifacts: function (jobId, leaseMinutes) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["GetDownloadableArtifacts"], $.makeArray(arguments)));
             },

            messageAdded: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["MessageAdded"], $.makeArray(arguments)));
             },

            pushLogEventsBatch: function (jobId, serializedEvents) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["PushLogEventsBatch"], $.makeArray(arguments)));
             },

            registerBuildAgent: function (workerId) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["RegisterBuildAgent"], $.makeArray(arguments)));
             },

            runJob: function (jobId) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["RunJob"], $.makeArray(arguments)));
             },

            startBuild: function (workerId, buildContext) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["StartBuild"], $.makeArray(arguments)));
             },

            startEnvironmentDeployment: function (jobId, environmentName, settings) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["StartEnvironmentDeployment"], $.makeArray(arguments)));
             },

            subscribeJobEvents: function (previousJobId, jobId) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["SubscribeJobEvents"], $.makeArray(arguments)));
             },

            updateArtifact: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["UpdateArtifact"], $.makeArray(arguments)));
             },

            updateBuildDetails: function (jobId, request) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["UpdateBuildDetails"], $.makeArray(arguments)));
             },

            updateTest: function (jobId, request) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["UpdateTest"], $.makeArray(arguments)));
             },

            updateTests: function (jobId, request) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["UpdateTests"], $.makeArray(arguments)));
             },

            writeConsole: function (jobId, args) {
                return proxies['buildJobHub'].invoke.apply(proxies['buildJobHub'], $.merge(["WriteConsole"], $.makeArray(arguments)));
             }
        };

        proxies['deploymentJobHub'] = this.createHubProxy('deploymentJobHub'); 
        proxies['deploymentJobHub'].client = { };
        proxies['deploymentJobHub'].server = {
            addMessage: function (jobId, args) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["AddMessage"], $.makeArray(arguments)));
             },

            completeJob: function (jobId, status) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["CompleteJob"], $.makeArray(arguments)));
             },

            messageAdded: function (jobId, args) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["MessageAdded"], $.makeArray(arguments)));
             },

            runJob: function (jobId) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["RunJob"], $.makeArray(arguments)));
             },

            runOncePerDeployment: function (jobId, blockName) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["RunOncePerDeployment"], $.makeArray(arguments)));
             },

            subscribeJobEvents: function (previousJobId, jobId) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["SubscribeJobEvents"], $.makeArray(arguments)));
             },

            writeConsole: function (jobId, args) {
                return proxies['deploymentJobHub'].invoke.apply(proxies['deploymentJobHub'], $.merge(["WriteConsole"], $.makeArray(arguments)));
             }
        };

        proxies['environmentHub'] = this.createHubProxy('environmentHub'); 
        proxies['environmentHub'].client = { };
        proxies['environmentHub'].server = {
            deploymentAdded: function (environmentId, args) {
                return proxies['environmentHub'].invoke.apply(proxies['environmentHub'], $.merge(["DeploymentAdded"], $.makeArray(arguments)));
             },

            deploymentStatusChanged: function (environmentId, args) {
                return proxies['environmentHub'].invoke.apply(proxies['environmentHub'], $.merge(["DeploymentStatusChanged"], $.makeArray(arguments)));
             },

            subscribeEnvironmentEvents: function (previousEnvironmentId, environmentId) {
                return proxies['environmentHub'].invoke.apply(proxies['environmentHub'], $.merge(["SubscribeEnvironmentEvents"], $.makeArray(arguments)));
             }
        };

        proxies['hostAgentHub'] = this.createHubProxy('hostAgentHub'); 
        proxies['hostAgentHub'].client = { };
        proxies['hostAgentHub'].server = {
            addCloud: function (cloud) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["AddCloud"], $.makeArray(arguments)));
             },

            addJobPerformanceCounters: function (authorizationToken, jobId, perfCounters) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["AddJobPerformanceCounters"], $.makeArray(arguments)));
             },

            assignJobToCloud: function (buildCloudId, jobRequest) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["AssignJobToCloud"], $.makeArray(arguments)));
             },

            completeWorkerJob: function (authorizationToken, jobId, status) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["CompleteWorkerJob"], $.makeArray(arguments)));
             },

            decommissionWorker: function (buildCloudId, workerId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["DecommissionWorker"], $.makeArray(arguments)));
             },

            decommissionWorkerWithSnapshot: function (buildCloudId, workerId, snapshotName) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["DecommissionWorkerWithSnapshot"], $.makeArray(arguments)));
             },

            deleteCloud: function (cloud) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["DeleteCloud"], $.makeArray(arguments)));
             },

            deleteSnapshot: function (buildCloudId, snapshotName) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["DeleteSnapshot"], $.makeArray(arguments)));
             },

            getBuildJobContext: function (authorizationToken, workerId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["GetBuildJobContext"], $.makeArray(arguments)));
             },

            getBuildStatus: function (authorizationToken, jobId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["GetBuildStatus"], $.makeArray(arguments)));
             },

            getJobStatus: function (authorizationToken, jobId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["GetJobStatus"], $.makeArray(arguments)));
             },

            jobFinished: function (jobId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["JobFinished"], $.makeArray(arguments)));
             },

            jobQuotasExceeded: function (authorizationToken, jobId, quotas) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["JobQuotasExceeded"], $.makeArray(arguments)));
             },

            jobStarted: function (jobId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["JobStarted"], $.makeArray(arguments)));
             },

            pingAppVeyor: function (authorizationToken, pingId, cloudsAvailability) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["PingAppVeyor"], $.makeArray(arguments)));
             },

            registerHostAgent: function (authorizationToken) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["RegisterHostAgent"], $.makeArray(arguments)));
             },

            reScheduleJob: function (authorizationToken, jobId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["ReScheduleJob"], $.makeArray(arguments)));
             },

            runWorkerJob: function (authorizationToken, jobId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["RunWorkerJob"], $.makeArray(arguments)));
             },

            updateCloud: function (cloud) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["UpdateCloud"], $.makeArray(arguments)));
             },

            updateCloudAvailability: function (authorizationToken, cloudAvailability) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["UpdateCloudAvailability"], $.makeArray(arguments)));
             },

            workerJobStarted: function (buildCloudId, workerId) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["WorkerJobStarted"], $.makeArray(arguments)));
             },

            writeConsole: function (authorizationToken, workerId, args) {
                return proxies['hostAgentHub'].invoke.apply(proxies['hostAgentHub'], $.merge(["WriteConsole"], $.makeArray(arguments)));
             }
        };

        proxies['projectHub'] = this.createHubProxy('projectHub'); 
        proxies['projectHub'].client = { };
        proxies['projectHub'].server = {
            buildAdded: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["BuildAdded"], $.makeArray(arguments)));
             },

            buildDetailsChanged: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["BuildDetailsChanged"], $.makeArray(arguments)));
             },

            buildJobsAdded: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["BuildJobsAdded"], $.makeArray(arguments)));
             },

            buildJobStatusChanged: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["BuildJobStatusChanged"], $.makeArray(arguments)));
             },

            buildJobTestCountersUpdated: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["BuildJobTestCountersUpdated"], $.makeArray(arguments)));
             },

            buildMessageAdded: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["BuildMessageAdded"], $.makeArray(arguments)));
             },

            deploymentAdded: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["DeploymentAdded"], $.makeArray(arguments)));
             },

            deploymentJobsAdded: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["DeploymentJobsAdded"], $.makeArray(arguments)));
             },

            deploymentJobStatusChanged: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["DeploymentJobStatusChanged"], $.makeArray(arguments)));
             },

            deploymentMessageAdded: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["DeploymentMessageAdded"], $.makeArray(arguments)));
             },

            deploymentStatusChanged: function (projectId, args) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["DeploymentStatusChanged"], $.makeArray(arguments)));
             },

            subscribeProjectEvents: function (previousProjectId, projectId) {
                return proxies['projectHub'].invoke.apply(proxies['projectHub'], $.merge(["SubscribeProjectEvents"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));